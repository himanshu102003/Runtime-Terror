steps:
# 1) Install Python dependencies
- name: 'python:3.11'
  id: 'install-deps'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      python -m venv /workspace/venv
      source /workspace/venv/bin/activate
      pip install --upgrade pip
      pip install requests google-auth lxml google-cloud-aiplatform vertexai

# 2) Generate AI tests
- name: 'python:3.11'
  id: 'generate-tests'
  entrypoint: 'bash'
  env:
    - 'GOOGLE_CLOUD_PROJECT=runtime-terror-473409'
  args:
    - '-c'
    - |
      source /workspace/venv/bin/activate
      cd /workspace
      
      # Clean existing generated tests to avoid conflicts
      find backend/src/test/java -name "*Test.java" -type f -delete || true
      
      python tools/vertex_generate_tests.py \
        --source_dir=backend/src/main/java/com/github/yildizmy/service \
        --out_dir=backend/src/test/java
      
      echo "Generated test files:"
      find backend/src/test/java -name "*Test.java" -type f

# 3) Verify Java version and run Maven tests
- name: 'maven:3.9.4-eclipse-temurin-17'
  id: 'verify-java'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Java version (should be 17):"
      java -version
      echo "Maven version:"
      mvn -version

# 4) Display and upload generated test files
- name: 'gcr.io/cloud-builders/gsutil'
  id: 'display-and-upload-tests'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "=== GENERATED TEST FILES SUMMARY ==="
      echo "Total test files generated:"
      find backend/src/test/java -name "*Test.java" -type f | wc -l
      
      echo -e "\n=== LIST OF GENERATED TEST FILES ==="
      find backend/src/test/java -name "*Test.java" -type f | sort
      
      echo -e "\n=== TEST FILE CONTENTS PREVIEW ==="
      for file in $(find backend/src/test/java -name "*Test.java" -type f | sort); do
        echo "----------------------------------------"
        echo "FILE: $file"
        echo "SIZE: $(wc -l < "$file") lines"
        echo "PACKAGE: $(head -1 "$file")"
        echo "CLASS: $(grep -E "^(class|public class)" "$file" | head -1)"
        echo "TEST METHODS: $(grep -c "@Test" "$file") methods"
        echo "----------------------------------------"
      done
      
      echo -e "\n=== UPLOADING GENERATED TESTS TO LOGS ==="
      # Upload generated test files to GCS for logging
      gsutil -m cp -r backend/src/test/java gs://runtime-terror-logs/generated-tests/$SHORT_SHA/
      
      # Create a summary file and upload it
      echo "Build ID: $BUILD_ID" > /tmp/test-generation-summary.txt
      echo "Commit SHA: $SHORT_SHA" >> /tmp/test-generation-summary.txt
      echo "Timestamp: $(date)" >> /tmp/test-generation-summary.txt
      echo "Total test files: $(find backend/src/test/java -name "*Test.java" -type f | wc -l)" >> /tmp/test-generation-summary.txt
      echo -e "\nGenerated files:" >> /tmp/test-generation-summary.txt
      find backend/src/test/java -name "*Test.java" -type f | sort >> /tmp/test-generation-summary.txt
      
      gsutil cp /tmp/test-generation-summary.txt gs://runtime-terror-logs/generated-tests/$SHORT_SHA/summary.txt
      
      echo "âœ… Generated test files uploaded to: gs://runtime-terror-logs/generated-tests/$SHORT_SHA/"

# 5) Run Maven tests
- name: 'maven:3.9.4-eclipse-temurin-17'
  id: 'run-tests'
  entrypoint: 'mvn'
  dir: 'backend'
  args: 
    - 'clean'
    - 'test'
    - 'jacoco:report'

# 6) Upload reports to GCS
- name: 'gcr.io/cloud-builders/gsutil'
  id: 'upload-reports'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      gsutil -m cp -r backend/target gs://runtime-terror-logs/reports/$SHORT_SHA/
      gsutil -m cp -r backend/src/test/java gs://runtime-terror-logs/reports/$SHORT_SHA/tests/

# 7) Check coverage
- name: 'python:3.11'
  id: 'check-coverage'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      source /workspace/venv/bin/activate
      python tools/check_coverage.py backend/target/site/jacoco/jacoco.xml 0.40

timeout: '1800s'

artifacts:
  objects:
    location: 'gs://runtime-terror-logs/build-artifacts/${SHORT_SHA}/'
    paths: 
      - 'backend/target/**'
      - 'backend/src/test/java/**'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 10